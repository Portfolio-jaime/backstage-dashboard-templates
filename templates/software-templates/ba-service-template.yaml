apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: ba-service-template
  title: BA Service Template
  description: Create a new service with environment-specific deployment
  tags:
    - recommended
    - ba
    - service
    - microservice
spec:
  owner: platform-team
  type: service

  parameters:
    - title: Service Information
      required:
        - name
        - description
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the service
          pattern: '^[a-z0-9-]+$'
          ui:autofocus: true
          ui:help: 'Use lowercase letters, numbers, and hyphens only'
        description:
          title: Description
          type: string
          description: Help others understand what this service does
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group

    - title: Environment Selection
      required:
        - environment
        - deployment_type
      properties:
        environment:
          title: Target Environment
          type: string
          description: Choose the environment where this service will be deployed
          default: DEV1
          enum:
            - PROD1
            - SIT1
            - DEV1
            - PCM
            - UAT1
          enumNames:
            - 'ðŸŸ¢ PROD1 - Production Environment'
            - 'ðŸŸ¡ SIT1 - System Integration Testing'
            - 'ðŸŸ  DEV1 - Development Environment'
            - 'ðŸ”µ PCM - Pre-production Compatibility'
            - 'ðŸŸ£ UAT1 - User Acceptance Testing'
          ui:widget: select
          ui:help: 'Select the primary environment for this service'

        deployment_type:
          title: Deployment Strategy
          type: string
          description: How should this service be deployed?
          default: kubernetes
          enum:
            - kubernetes
            - docker
            - serverless
            - vm
          enumNames:
            - 'Kubernetes (Recommended)'
            - 'Docker Container'
            - 'Serverless/Functions'
            - 'Virtual Machine'

        multi_environment:
          title: Multi-Environment Support
          type: boolean
          default: true
          description: Generate configuration for multiple environments?
          ui:help: 'Creates config files for all environments with promotion pipeline'

    - title: Technical Configuration
      properties:
        programming_language:
          title: Programming Language
          type: string
          description: Primary programming language for this service
          default: typescript
          enum:
            - typescript
            - javascript
            - python
            - java
            - csharp
            - go
          enumNames:
            - 'TypeScript (Node.js)'
            - 'JavaScript (Node.js)'
            - 'Python'
            - 'Java (Spring Boot)'
            - 'C# (.NET)'
            - 'Go'

        database_needed:
          title: Database Required?
          type: boolean
          default: false
          description: Does this service need a database?

        database_type:
          title: Database Type
          type: string
          description: What type of database?
          default: postgresql
          enum:
            - postgresql
            - mysql
            - mongodb
            - redis
            - cosmosdb
          enumNames:
            - 'PostgreSQL'
            - 'MySQL'
            - 'MongoDB'
            - 'Redis'
            - 'Azure Cosmos DB'
          ui:widget: select
          ui:options:
            hideExpression: database_needed !== true

    - title: Repository Configuration
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - Portfolio-jaime
            allowedRepos:
              - 'ba-services-{{parameters.environment|lower}}'
              - 'ba-{{parameters.environment|lower}}-services'
            defaultOwner: Portfolio-jaime
            defaultRepo: 'ba-services-{{parameters.environment|lower}}'

  steps:
    - id: fetch-base
      name: Fetch Base Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}
          environment: ${{ parameters.environment }}
          deployment_type: ${{ parameters.deployment_type }}
          programming_language: ${{ parameters.programming_language }}
          database_needed: ${{ parameters.database_needed }}
          database_type: ${{ parameters.database_type }}
          multi_environment: ${{ parameters.multi_environment }}

    - id: create-environment-configs
      name: Generate Environment Configurations
      action: ba:create-environment-config
      input:
        environment: ${{ parameters.environment }}
        serviceName: ${{ parameters.name }}
        deploymentType: ${{ parameters.deployment_type }}
        multiEnvironment: ${{ parameters.multi_environment }}

    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'BA Service: ${{ parameters.description }}'
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        gitCommitMessage: 'feat: create ${{ parameters.name }} service for ${{ parameters.environment }} environment'
        gitAuthorName: 'Backstage Scaffolder'
        gitAuthorEmail: 'scaffolder@ba.com'

    - id: setup-ci-cd
      name: Setup CI/CD Pipeline
      action: ba:setup-pipeline
      input:
        repoUrl: ${{ steps.publish.output.repoContentsUrl }}
        environment: ${{ parameters.environment }}
        deploymentType: ${{ parameters.deployment_type }}

    - id: register
      name: Register in Backstage Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    - id: create-docs
      name: Create Initial Documentation
      action: ba:create-techdocs
      input:
        repoUrl: ${{ steps.publish.output.repoContentsUrl }}
        serviceName: ${{ parameters.name }}
        environment: ${{ parameters.environment }}

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
        icon: github
      - title: Open in catalog
        url: '/catalog/default/component/${{ parameters.name }}'
        icon: catalog
      - title: CI/CD Pipeline
        url: '${{ steps.publish.output.remoteUrl }}/actions'
        icon: github
      - title: Environment Dashboard
        url: '/ba-dashboard?env=${{ parameters.environment }}'
        icon: dashboard
      - title: Documentation
        url: '/docs/default/component/${{ parameters.name }}'
        icon: docs